# -*- coding: utf-8 -*-
"""typesof inheritence.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13tYFY2Er3xWUKq4JFV5MhrDYHTQlS8oq

single inheritance
"""

class Flower:
    def __init__(self, name, color):
        self.flower_name = name
        self.flower_color = color

    def printdetails(self):
        print(self.flower_name , self.flower_color)


class Rose(Flower):
    def __init__(self, name, color, type):
        Flower.__init__(self, name, color)
        self.type = type

    def printdetails(self):
        print(self.flower_name, self.type)


f1 = Rose("Rose", "Red", "Hybrid")
f1.printdetails()

"""Multiple inheritance"""

class Animal:
    def speak(self):
        print("Animal speaks")

class Pet:
    def play(self):
        print("Pet plays")

class Dog(Animal, Pet):
    def bark(self):
        print("Dog barks")

d = Dog()
d.speak()
d.play()
d.bark()

"""multilevel inheritance"""

class Person:
    def info(self):
        print("Esha")

class Student(Person):
    def study(self):
        print("Business analytics")

class CollegeStudent(Student):
    def status(self):
        print("grad")

cs = CollegeStudent()
cs.info()
cs.study()
cs.status()

"""Hierachial"""

class Books:
    def library(self):
        print("i have different geners")

class horror(Books):
    def scarygenre(self):
        print("horror love it")

class romcom(Books):
    def romantic(self):
        print("romcom feel good")

H = horror()
R = romcom()

H.library()
H.scarygenre()

R.library()
R.romantic()

"""Hybrid Inheritance"""

class Vehicle:
    def fuel(self):
        print("fuel based")

class Car(Vehicle):
    def wheels(self):
        print("4 wheeler")

class Electric:
    def charge(self):
        print("chargable")

class HybridCar(Car, Electric):
    def features(self):
        print("Uses both fuel and electric power")

h = HybridCar()

h.fuel()
h.wheels()
h.charge()
h.features()

class wallet:
  def __init__(self,cards,cash, change):
    self.cards = cards
    self.__cash = cash
    self.__change = change
  @property
  def get_cash(self):
    return self.__cash
  @get_cash.setter
  def get_cash(self,extra_cash):
    if extra_cash > 0:
      self.__cash = extra_cash
    else:
      self.__cash = 0
      print("invalid amount")
  @property
  def get_change(self):
    return self.__change
  @get_change.setter
  def get_change(self,extra_change):
    if extra_change > 0:
      self.__change = extra_change
    else:
      self.__change = 0
      print("invalid amount")
Amount = wallet("amex", 600, 20)

print(Amount.cards)
Amount.get_cash = 1000
print(Amount.get_cash)
Amount.get_change = 50
print(Amount.get_change)

class wallet:
    def __init__(self, balance, cards, photo):
        self.balance = balance  # public
        self.__cards = cards  # protected
        self.__photo = photo  # private
    @property
    def g_cards(self):
        return self.__cards
    @g_cards.setter
    def g_cards(self, cards):
        if g_cards >= 1:  # Assuming 'cards' is intended here
            self.__cards = cards
        else:
            print("no cards")
    @property
    def g_photo(self):
        return self.__photo
    @g_photo.setter
    def g_photo(self, photo):
        if g_photo >= 1:
            self.__photo = photo
        else:
            print("no photo")
# Create an instance of the class outside the class definition
w = wallet(2000, 3, 1)
print(w.balance)
print(w.g_cards)
print(w.g_photo)